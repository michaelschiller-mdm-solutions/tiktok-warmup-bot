---
description: 
globs: 
alwaysApply: false
---
# Database Patterns and Conventions

## Database Setup
- **Engine**: PostgreSQL 15+ with Docker Compose
- **Connection**: Pool-based connections via [backend/src/database.ts](mdc:backend/src/database.ts)
- **Credentials**: Default development credentials in [docker-compose.yml](mdc:docker-compose.yml)

## Schema Organization

### Core Tables
- `models` - Instagram model configurations and settings
- `accounts` - Instagram account management with proxy integration
- `model_analytics` - Performance metrics and statistics
- `model_target_follows` - Follow/unfollow tracking with timestamps

### Advanced Analytics Tables
- `cost_categories` - Expense categorization (Cupid, Proxies, VPS, etc.)
- `model_costs` - Per-model cost allocation
- `account_costs` - Per-account expense tracking
- `revenue_events` - Income tracking and conversion data
- `conversion_events` - Follow-to-subscription tracking
- `proxy_providers` - Proxy service management

### Relationship Tables
- `account_relationships` - Mother-slave account hierarchies
- `dynamic_columns` - User-defined custom fields
- `account_dynamic_data` - Custom field values storage

## Migration Patterns

### File Naming Convention
- `00X-descriptive-name.sql` - Sequential numbering
- Example: [database/migrations/003-extend-accounts-comprehensive.sql](mdc:database/migrations/003-extend-accounts-comprehensive.sql)

### Migration Structure
```sql
-- Add migration description
-- Migration: 003-extend-accounts-comprehensive
-- Purpose: Add proxy management and cost tracking

-- Create tables with proper constraints
CREATE TABLE IF NOT EXISTS proxy_providers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    monthly_cost_per_proxy DECIMAL(10,2) DEFAULT 0
);

-- Add columns with defaults for existing data
ALTER TABLE accounts 
ADD COLUMN IF NOT EXISTS proxy_host VARCHAR(255),
ADD COLUMN IF NOT EXISTS proxy_port INTEGER,
ADD COLUMN IF NOT EXISTS proxy_username VARCHAR(255),
ADD COLUMN IF NOT EXISTS proxy_password TEXT; -- Encrypted storage
```

### Migration Best Practices
1. Always use `IF NOT EXISTS` for tables and columns
2. Provide default values for new columns
3. Use proper data types: DECIMAL for money, VARCHAR with limits
4. Add indexes for performance: `CREATE INDEX IF NOT EXISTS`
5. Use transactions for complex migrations

## Data Types and Conventions

### Standard Field Types
- **IDs**: `SERIAL PRIMARY KEY` for auto-increment
- **Money**: `DECIMAL(10,2)` for currency values
- **Percentages**: `DECIMAL(5,2)` for rates (0.00-100.00)
- **Timestamps**: `TIMESTAMP DEFAULT CURRENT_TIMESTAMP`
- **JSON**: `JSONB` for configuration objects
- **Encrypted**: `TEXT` for sensitive data (proxy passwords)

### Naming Conventions
- Tables: lowercase with underscores (`model_analytics`)
- Columns: lowercase with underscores (`follow_back_rate`)
- Indexes: `idx_tablename_column` format
- Foreign Keys: `fk_tablename_column` format

## Performance Patterns

### Essential Indexes
```sql
-- Performance indexes for analytics queries
CREATE INDEX IF NOT EXISTS idx_accounts_model_id ON accounts(model_id);
CREATE INDEX IF NOT EXISTS idx_model_target_follows_account_id ON model_target_follows(account_id);
CREATE INDEX IF NOT EXISTS idx_revenue_events_account_id ON revenue_events(account_id);
```

### Query Optimization
- Use EXPLAIN ANALYZE for complex queries
- Prefer JOINs over subqueries for better performance
- Use CTEs for complex analytics calculations
- Add LIMIT clauses for paginated results

## Sample Data Pattern
- Initial data in [database/init/](mdc:database/init) directory
- Sample data includes realistic proxy configurations
- Cost categories pre-populated with standard expenses
- Model and account relationships established

## Connection Management
```typescript
// From backend/src/database.ts
export const db = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'instagram_tracker',
  user: process.env.DB_USER || 'admin',
  password: process.env.DB_PASSWORD || 'password123',
  max: 20, // Connection pool size
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});
```

